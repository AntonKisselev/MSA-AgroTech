@startuml MVP_Мониторинг_C1_альтернативный

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(партнер, "партнер", "партнер компьютерного зрения")
Person(дежурный, "дежурный сотрудник", "принимает решение о реакции на инциденты")
Person(аналитик, "Аналитик", "пользователь системы мониторинга")
Person(админ, "Администратор", "пользователь системы мониторинга")

System_Boundary(платформа, "АгроПром Х - платформа мониторинга") {

    Container_Boundary(данные_со_свиноферм, "Данные со свиноферм","", "Видео данные оцифровываются на месте и извлекает необходимые метрики, данный блок отображает группу ферм"){
        Container(камеры, "Камеры")
        Container(очередь_событий_фермы, "Очередь событий", "Artemis")
        Container(датчики, "Контроллер датчиков", "C++", "датчики уровня воды, еды")
        Rel(датчики, очередь_событий_фермы, "отправляет данные с датчиков уровня кормов")
        Container(доставка_данных, "Доставка данных", "Go", "Доставка данных в центральное хранилище для обработки, включает механизмы контроля доставки и повторной отправки")
        Rel(доставка_данных, очередь_событий_фермы, "подписан на изменения")
        ContainerDb(база_данных_фермы, "Локальная база данных фермы", "mysql", "Хранит локально данные")
        Rel(база_данных_фермы, очередь_событий_фермы, "подписан на изменения")
    }
    Container(оцифровка, "Система оцифровки сырых данных","Python", "Система оцифровывает потоковое видео и извлекает необходимые метрики")
    Container_Boundary(шина, "Агрегация и хранение данных", ""){
        Container(точка_поступления_данных, "API подключения для загрузки данных", "Go")
        Container(шина_данных, "Шина данных", "Kafka")
        Rel(точка_поступления_данных, шина_данных, "отправка данных")
        ContainerDb(общее_хранилище, "Главное хранилище данных", "PostgreSQL")
        Rel(общее_хранилище, шина_данных, "подписка на изменения")
        Container(распознавание_инцидентов, "Распознование инцидентов", "Python", "извлекает данные и принимает решение об инциденте")
        Rel(распознавание_инцидентов, шина_данных, "подписка на изменения")
        Container(внутренний_апи, "внутреннее апи для получения данных", "Go")
        Rel(внутренний_апи, общее_хранилище, "Запрашивает данные")
    }
    Container(оповещения, "Система оповещения", "Система оповещения об инцидентах")
    Container_Boundary(фронт_системы, "Система публичного доступа", "Включает сайт и мобильное приложение, так же api, права и разделение доступов"){
        Container(api_публичный, "API подключения", "REST")
        Rel(api_публичный, внутренний_апи, "Запрашивает данные")
        Container_Boundary(сайт, "Сайт", "PHP"){
            Container(вебсервер_сайт, "Вебсервер", "nginx")
            Container(сайт_приложение, "бекенд сайта", "php-fpm")
            Rel(вебсервер_сайт, сайт_приложение, "Проксирует")
        }
        Rel(сайт_приложение, внутренний_апи, "Запрашивает данные")
        Container(мобильное_приложение, "Мобильное приложение", "Kotlin")
        Rel(мобильное_приложение, api_публичный, "Запрашивает данные")
    }

}
Rel(доставка_данных, точка_поступления_данных, "отправляет оцифрованные данные", "grpc")
Rel(камеры, оцифровка, "отправляет потоковое видео")
Rel(партнер, оцифровка, "Загружает обновления")
Rel(оцифровка, точка_поступления_данных, "Загружает оцифрованные данные")
Rel(распознавание_инцидентов, оповещения, "произошел инцидент")


Rel(оповещения, мобильное_приложение, "оповещает об инциденте")
Rel(дежурный, мобильное_приложение, "получает данные об инцидентах")
Rel(аналитик, вебсервер_сайт, "анализирует данные")
Rel(админ, вебсервер_сайт, "администрирует систему")
@enduml