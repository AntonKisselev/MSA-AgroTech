@startuml MVP_Мониторинг_C1_основной

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml

Person(партнер, "партнер", "партнер компьютерного зрения")
Person(дежурный, "дежурный сотрудник", "принимает решение о реакции на инциденты")
Person(аналитик, "Аналитик", "пользователь системы мониторинга")
Person(админ, "Администратор", "пользователь системы мониторинга")

System_Boundary(платформа, "АгроПром Х - платформа мониторинга") {
    Container(данные_со_свиноферм, "Данные со свиноферм","", "Видео данные оцифровываются на месте и извлекает необходимые метрики, данный блок отображает группу ферм"){
        Component(камеры, "Камеры")
        Component(обработка_видео, "Модуль обработки видео потока", "Python")
        Rel(камеры, обработка_видео, "передача видео по локальной сети")   
        Component(очередь_событий_фермы, "Очередь событий", "Artemis")
        Rel(обработка_видео, очередь_событий_фермы, "отправляет оцифрованные данные")        
        Component(датчики, "Контроллер датчиков", "С++", "датчики уровня воды, еды")
        Rel(датчики, очередь_событий_фермы, "отправляет данные с датчиков уровня кормов")        
        Component(доставка_данных, "Доставка данных", "Go", "Доставка данных в центральное хранилище для обработки, включает механизмы контроля доставки и повторной отправки")
        Rel(доставка_данных, очередь_событий_фермы, "подписан на изменения")
        Component(база_данных_фермы, "Локальная база данных фермы", "mysql", "Хранит локально данные")
        Rel(база_данных_фермы, очередь_событий_фермы, "подписан на изменения")
    }
    Container(шина, "Агрегация и хранение данных", ""){
        Component(точка_поступления_данных, "API подключения для загрузки данных", "Go")
        Component(шина_данных, "Шина данных", "Kafka")
        Rel(точка_поступления_данных, шина_данных, "отправка данных")
        Component(общее_хранилище, "Главное хранилище данных", "PostgreSQL")
        Rel(общее_хранилище, шина_данных, "подписка на изменения")
        Component(распознавание_инцидентов, "Распознование инцидентов", "Python", "извлекает данные и принимает решение об инциденте")
        Rel(распознавание_инцидентов, шина_данных, "подписка на изменения")
        Component(внутренний_апи, "внутреннее апи для получения данных", "Go")
        Rel(внутренний_апи, общее_хранилище, "Запрашивает данные")
    }
    Container(обновление_зрения, "Обновление алгоритмов компьютерного зрения", "Python")
    Container(оповещения, "Система оповещения", "Go", "Система оповещения об инцидентах")
    System(фронт_системы, "Система публичного доступа", "Включает сайт и мобильное приложение, так же api, права и разделение доступов"){
        Container(api_публичный, "API подключения", "REST")
        Rel(api_публичный, внутренний_апи, "Запрашивает данные", "REST")
        Container(сайт, "Сайт", "PHP"){
            Component(вебсервер_сайт, "Вебсервер", "nginx")
            Component(сайт_приложение, "бекенд сайта", "php-fpm")
            Rel(вебсервер_сайт, сайт_приложение, "Проксирует")
        }
        Rel(сайт_приложение, внутренний_апи, "Запрашивает данные", "REST")
        Container(мобильное_приложение, "Мобильное приложение", "Kotlin")
        Rel(мобильное_приложение, api_публичный, "Запрашивает данные", "REST")
    }

}
Rel(доставка_данных, точка_поступления_данных, "отправляет оцифрованные данные", "grpc")
Rel(обновление_зрения, обработка_видео, "обновляет алгоритмы на каждой ферме")
Rel(распознавание_инцидентов, оповещения, "произошел инцидент")

Rel(оповещения, мобильное_приложение, "оповещает об инциденте")
Rel(дежурный, мобильное_приложение, "получает данные об инцидентах", "WS")
Rel(партнер, обновление_зрения, "Загружает обновления")
Rel(аналитик, вебсервер_сайт, "анализирует данные")
Rel(админ, вебсервер_сайт, "администрирует систему")
@enduml